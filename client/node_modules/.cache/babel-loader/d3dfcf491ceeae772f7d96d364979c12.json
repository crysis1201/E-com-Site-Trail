{"ast":null,"code":"import firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nimport \"firebase/auth\";\nconst Config = {\n  apiKey: \"AIzaSyCdp5iok0u2cy9gD7OCeU8ADpTv_KlSWyg\",\n  authDomain: \"e-com-d35c1.firebaseapp.com\",\n  projectId: \"e-com-d35c1\",\n  storageBucket: \"e-com-d35c1.appspot.com\",\n  messagingSenderId: \"609934601013\",\n  appId: \"1:609934601013:web:58ce83a6dfd9e5625f3a7c\",\n  measurementId: \"G-JRXS6WGDS8\"\n};\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const snapshot = await userRef.get();\n\n  if (!snapshot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const setDate = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        setDate,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log('error creating user', error.message);\n    }\n  }\n\n  return userRef;\n};\nexport const addCollectionAndDocuments = async (collectionkey, objectsToAdd) => {\n  const collectionRef = firestore.collection(collectionkey);\n  const batch = firestore.batch();\n  objectsToAdd.forEach(obj => {\n    const newDocRef = collectionRef.doc();\n    batch.set(newDocRef, obj);\n  });\n  return await batch.commit();\n};\nfirebase.initializeApp(Config);\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: \"select_account\"\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\nexport default firebase;","map":{"version":3,"sources":["C:/Users/Eazhilamuthan/Documents/ReactProject/e-com/src/Components/firebase/firebase-utils.js"],"names":["firebase","Config","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","snapshot","get","exists","displayName","email","setDate","Date","set","error","console","log","message","addCollectionAndDocuments","collectionkey","objectsToAdd","collectionRef","collection","batch","forEach","obj","newDocRef","commit","initializeApp","auth","provider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,cAArB;AACA,OAAO,oBAAP;AACA,OAAO,eAAP;AAEA,MAAMC,MAAM,GAAE;AACNC,EAAAA,MAAM,EAAE,yCADF;AAENC,EAAAA,UAAU,EAAE,6BAFN;AAGNC,EAAAA,SAAS,EAAE,aAHL;AAINC,EAAAA,aAAa,EAAE,yBAJT;AAKNC,EAAAA,iBAAiB,EAAE,cALb;AAMNC,EAAAA,KAAK,EAAE,2CAND;AAONC,EAAAA,aAAa,EAAE;AAPT,CAAd;AAUA,OAAO,MAAMC,yBAAyB,GAAG,OAAOC,QAAP,EAAiBC,cAAjB,KAAoC;AACrE,MAAI,CAACD,QAAL,EAAe;AACf,QAAME,OAAO,GAAGC,SAAS,CAACC,GAAV,CAAe,SAAQJ,QAAQ,CAACK,GAAI,EAApC,CAAhB;AAEA,QAAMC,QAAQ,GAAG,MAAMJ,OAAO,CAACK,GAAR,EAAvB;;AAEA,MAAI,CAACD,QAAQ,CAACE,MAAd,EAAsB;AACtB,UAAM;AAACC,MAAAA,WAAD;AAAcC,MAAAA;AAAd,QAAuBV,QAA7B;AACA,UAAMW,OAAO,GAAG,IAAIC,IAAJ,EAAhB;;AAEQ,QAAG;AACK,YAAMV,OAAO,CAACW,GAAR,CAAY;AACVJ,QAAAA,WADU;AAEVC,QAAAA,KAFU;AAGVC,QAAAA,OAHU;AAIV,WAAGV;AAJO,OAAZ,CAAN;AAOP,KARD,CASA,OAAMa,KAAN,EAAY;AACJC,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCF,KAAK,CAACG,OAAzC;AACP;AAER;;AACD,SAAOf,OAAP;AACP,CAzBM;AA2BP,OAAO,MAAMgB,yBAAyB,GAAG,OAAQC,aAAR,EAAuBC,YAAvB,KAAyC;AACjF,QAAMC,aAAa,GAAGlB,SAAS,CAACmB,UAAV,CAAqBH,aAArB,CAAtB;AAEA,QAAMI,KAAK,GAAGpB,SAAS,CAACoB,KAAV,EAAd;AACAH,EAAAA,YAAY,CAACI,OAAb,CAAqBC,GAAG,IAAI;AACpB,UAAMC,SAAS,GAAGL,aAAa,CAACjB,GAAd,EAAlB;AACAmB,IAAAA,KAAK,CAACV,GAAN,CAAUa,SAAV,EAAqBD,GAArB;AACP,GAHD;AAKA,SAAO,MAAMF,KAAK,CAACI,MAAN,EAAb;AAEA,CAXM;AAaPrC,QAAQ,CAACsC,aAAT,CAAuBrC,MAAvB;AAEA,OAAO,MAAMsC,IAAI,GAAGvC,QAAQ,CAACuC,IAAT,EAAb;AACP,OAAO,MAAM1B,SAAS,GAAGb,QAAQ,CAACa,SAAT,EAAlB;AACP,MAAM2B,QAAQ,GAAG,IAAIxC,QAAQ,CAACuC,IAAT,CAAcE,kBAAlB,EAAjB;AACAD,QAAQ,CAACE,mBAAT,CAA6B;AAAEC,EAAAA,MAAM,EAAE;AAAV,CAA7B;AACA,OAAO,MAAMC,gBAAgB,GAAG,MAAML,IAAI,CAACM,eAAL,CAAqBL,QAArB,CAA/B;AAEP,eAAexC,QAAf","sourcesContent":["import firebase from \"firebase/app\"\r\nimport \"firebase/firestore\"\r\nimport \"firebase/auth\"\r\n\r\nconst Config ={\r\n        apiKey: \"AIzaSyCdp5iok0u2cy9gD7OCeU8ADpTv_KlSWyg\",\r\n        authDomain: \"e-com-d35c1.firebaseapp.com\",\r\n        projectId: \"e-com-d35c1\",\r\n        storageBucket: \"e-com-d35c1.appspot.com\",\r\n        messagingSenderId: \"609934601013\",\r\n        appId: \"1:609934601013:web:58ce83a6dfd9e5625f3a7c\",\r\n        measurementId: \"G-JRXS6WGDS8\"\r\n};\r\n\r\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\r\n        if (!userAuth) return;\r\n        const userRef = firestore.doc(`users/${userAuth.uid}`)\r\n\r\n        const snapshot = await userRef.get();\r\n\r\n        if (!snapshot.exists) {\r\n        const {displayName, email} = userAuth;\r\n        const setDate = new Date();\r\n\r\n                try{\r\n                        await userRef.set({\r\n                                displayName,\r\n                                email,\r\n                                setDate,\r\n                                ...additionalData\r\n                        });\r\n\r\n                }\r\n                catch(error){\r\n                        console.log('error creating user', error.message)\r\n                }\r\n        \r\n        }\r\n        return userRef;\r\n};\r\n\r\nexport const addCollectionAndDocuments = async ( collectionkey, objectsToAdd ) => {\r\n const collectionRef = firestore.collection(collectionkey);\r\n\r\n const batch = firestore.batch();\r\n objectsToAdd.forEach(obj => {\r\n         const newDocRef = collectionRef.doc();\r\n         batch.set(newDocRef, obj);\r\n });\r\n\r\n return await batch.commit();\r\n\r\n};\r\n\r\nfirebase.initializeApp(Config);\r\n\r\nexport const auth = firebase.auth();\r\nexport const firestore = firebase.firestore();\r\nconst provider = new firebase.auth.GoogleAuthProvider();\r\nprovider.setCustomParameters({ prompt: \"select_account\" });\r\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\r\n\r\nexport default firebase;\r\n"]},"metadata":{},"sourceType":"module"}