{"ast":null,"code":"import _regeneratorRuntime from\"C:/Users/Eazhilamuthan/Documents/ReactProject/e-com/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _objectSpread from\"C:/Users/Eazhilamuthan/Documents/ReactProject/e-com/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _asyncToGenerator from\"C:/Users/Eazhilamuthan/Documents/ReactProject/e-com/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import firebase from\"firebase/app\";import\"firebase/firestore\";import\"firebase/auth\";var Config={apiKey:\"AIzaSyCdp5iok0u2cy9gD7OCeU8ADpTv_KlSWyg\",authDomain:\"e-com-d35c1.firebaseapp.com\",projectId:\"e-com-d35c1\",storageBucket:\"e-com-d35c1.appspot.com\",messagingSenderId:\"609934601013\",appId:\"1:609934601013:web:58ce83a6dfd9e5625f3a7c\",measurementId:\"G-JRXS6WGDS8\"};export var createUserProfileDocument=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(userAuth,additionalData){var userRef,snapshot,displayName,email,setDate;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:if(userAuth){_context.next=2;break;}return _context.abrupt(\"return\");case 2:userRef=firestore.doc(\"users/\".concat(userAuth.uid));_context.next=5;return userRef.get();case 5:snapshot=_context.sent;if(snapshot.exists){_context.next=17;break;}displayName=userAuth.displayName,email=userAuth.email;setDate=new Date();_context.prev=9;_context.next=12;return userRef.set(_objectSpread({displayName:displayName,email:email,setDate:setDate},additionalData));case 12:_context.next=17;break;case 14:_context.prev=14;_context.t0=_context[\"catch\"](9);console.log('error creating user',_context.t0.message);case 17:return _context.abrupt(\"return\",userRef);case 18:case\"end\":return _context.stop();}}},_callee,null,[[9,14]]);}));return function createUserProfileDocument(_x,_x2){return _ref.apply(this,arguments);};}();export var addCollectionAndDocuments=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(collectionkey,objectsToAdd){var collectionRef,batch;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:collectionRef=firestore.collection(collectionkey);batch=firestore.batch();objectsToAdd.forEach(function(obj){var newDocRef=collectionRef.doc();batch.set(newDocRef,obj);});_context2.next=5;return batch.commit();case 5:return _context2.abrupt(\"return\",_context2.sent);case 6:case\"end\":return _context2.stop();}}},_callee2);}));return function addCollectionAndDocuments(_x3,_x4){return _ref2.apply(this,arguments);};}();export var convertCollectionsSnapshotToMap=function convertCollectionsSnapshotToMap(collections){var transformedCollection=collections.docs.map(function(doc){var _doc$data=doc.data(),title=_doc$data.title,items=_doc$data.items;return{routeName:encodeURI(title.toLowerCase()),id:doc.id,title:title,items:items};});return transformedCollection.reduce(function(accumulator,collection){accumulator[collection.title.toLowerCase()]=collection;return accumulator;},{});};export var getCurrentUser=function getCurrentUser(){return new Promise(function(resolve,reject){var unsubscribe=auth.onAuthStateChanged(function(userAuth){unsubscribe();resolve(userAuth);},reject);});};firebase.initializeApp(Config);export var auth=firebase.auth();export var firestore=firebase.firestore();export var googleProvider=new firebase.auth.GoogleAuthProvider();googleProvider.setCustomParameters({prompt:\"select_account\"});export var signInWithGoogle=function signInWithGoogle(){return auth.signInWithPopup(googleProvider);};export default firebase;","map":{"version":3,"sources":["C:/Users/Eazhilamuthan/Documents/ReactProject/e-com/client/src/Components/firebase/firebase-utils.js"],"names":["firebase","Config","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","get","snapshot","exists","displayName","email","setDate","Date","set","console","log","message","addCollectionAndDocuments","collectionkey","objectsToAdd","collectionRef","collection","batch","forEach","obj","newDocRef","commit","convertCollectionsSnapshotToMap","collections","transformedCollection","docs","map","data","title","items","routeName","encodeURI","toLowerCase","id","reduce","accumulator","getCurrentUser","Promise","resolve","reject","unsubscribe","auth","onAuthStateChanged","initializeApp","googleProvider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"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","sourcesContent":["import firebase from \"firebase/app\"\r\nimport \"firebase/firestore\"\r\nimport \"firebase/auth\"\r\n\r\nconst Config ={\r\n        apiKey: \"AIzaSyCdp5iok0u2cy9gD7OCeU8ADpTv_KlSWyg\",\r\n        authDomain: \"e-com-d35c1.firebaseapp.com\",\r\n        projectId: \"e-com-d35c1\",\r\n        storageBucket: \"e-com-d35c1.appspot.com\",\r\n        messagingSenderId: \"609934601013\",\r\n        appId: \"1:609934601013:web:58ce83a6dfd9e5625f3a7c\",\r\n        measurementId: \"G-JRXS6WGDS8\"\r\n};\r\n\r\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\r\n        if (!userAuth) return;\r\n        const userRef = firestore.doc(`users/${userAuth.uid}`)\r\n\r\n        const snapshot = await userRef.get();\r\n\r\n        if (!snapshot.exists) {\r\n        const {displayName, email} = userAuth;\r\n        const setDate = new Date();\r\n\r\n                try{\r\n                        await userRef.set({\r\n                                displayName,\r\n                                email,\r\n                                setDate,\r\n                                ...additionalData\r\n                        });\r\n\r\n                }\r\n                catch(error){\r\n                        console.log('error creating user', error.message)\r\n                }\r\n        \r\n        }\r\n        return userRef;\r\n};\r\n\r\nexport const addCollectionAndDocuments = async ( collectionkey, objectsToAdd ) => {\r\n const collectionRef = firestore.collection(collectionkey);\r\n\r\n const batch = firestore.batch();\r\n objectsToAdd.forEach(obj => {\r\n         const newDocRef = collectionRef.doc();\r\n         batch.set(newDocRef, obj);\r\n });\r\n\r\n return await batch.commit();\r\n\r\n};\r\n\r\nexport const convertCollectionsSnapshotToMap = (collections) => {\r\n        const transformedCollection = collections.docs.map(doc => {\r\n                const {title, items} = doc.data();\r\n\r\n                return {\r\n                        routeName: encodeURI(title.toLowerCase()),\r\n                        id: doc.id,\r\n                        title,\r\n                        items\r\n                }\r\n        });\r\n\r\n        return transformedCollection.reduce((accumulator, collection) => {\r\n                accumulator[collection.title.toLowerCase()] = collection;\r\n                return accumulator;\r\n        }, {});\r\n}\r\n\r\nexport const getCurrentUser = () => {\r\n        return new Promise((resolve, reject) => {\r\n          const unsubscribe = auth.onAuthStateChanged(userAuth => {\r\n            unsubscribe();\r\n            resolve(userAuth);\r\n          }, reject);\r\n        });\r\n      };\r\n\r\nfirebase.initializeApp(Config);\r\n\r\nexport const auth = firebase.auth();\r\nexport const firestore = firebase.firestore();\r\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\r\ngoogleProvider.setCustomParameters({ prompt: \"select_account\" });\r\nexport const signInWithGoogle = () => auth.signInWithPopup(googleProvider);\r\n\r\nexport default firebase;\r\n"]},"metadata":{},"sourceType":"module"}